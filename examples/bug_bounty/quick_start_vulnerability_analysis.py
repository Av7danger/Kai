#!/usr/bin/env python3
"""
Quick Start: Vulnerability Analysis & Reproduction
==================================================

This script helps you quickly get started with vulnerability analysis
and reproduction in your bug bounty framework.

Author: Bug Bounty Pro Team
"""

import os
import sys
import sqlite3
from pathlib import Path

def print_header():
    """Print the header"""
    print("\n" + "🔬" + "="*68 + "🔬")
    print("🎯 QUICK START: VULNERABILITY ANALYSIS & REPRODUCTION 🎯")
    print("🔬" + "="*68 + "🔬")

def check_vulnerabilities():
    """Check if there are vulnerabilities to analyze"""
    db_path = Path("bb_pro.db")
    
    if not db_path.exists():
        return False, 0, "Database not found"
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM vulnerabilities")
        count = cursor.fetchone()[0]
        conn.close()
        return True, count, "Database found"
    except Exception as e:
        return False, 0, str(e)

def show_vulnerability_sample():
    """Show a sample of found vulnerabilities"""
    try:
        conn = sqlite3.connect("bb_pro.db")
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT v.id, v.title, v.vuln_type, v.severity, t.name as target_name
            FROM vulnerabilities v
            LEFT JOIN targets t ON v.target_id = t.id
            ORDER BY v.found_date DESC
            LIMIT 5
        """)
        
        rows = cursor.fetchall()
        conn.close()
        
        if rows:
            print("\n📊 Recent Vulnerabilities Found:")
            print("-" * 70)
            print(f"{'ID':<4} {'Title':<25} {'Type':<15} {'Severity':<10} {'Target'}")
            print("-" * 70)
            
            for row in rows:
                title = row['title'][:24] if row['title'] else 'Unknown'
                vuln_type = row['vuln_type'][:14] if row['vuln_type'] else 'Unknown'
                target = row['target_name'][:15] if row['target_name'] else 'Unknown'
                print(f"{row['id']:<4} {title:<25} {vuln_type:<15} {row['severity']:<10} {target}")
            
            return True
        else:
            print("\n❌ No vulnerabilities found in database")
            return False
            
    except Exception as e:
        print(f"\n❌ Error reading vulnerabilities: {e}")
        return False

def quick_start_options():
    """Show quick start options"""
    print("\n🚀 QUICK START OPTIONS:")
    print("="*50)
    
    print("\n1️⃣  INSTANT START (No Setup Required)")
    print("   🔧 Manual Vulnerability Testing")
    print("   ✅ Works immediately, no API keys needed")
    print("   📚 Great for learning and understanding vulnerabilities")
    print()
    print("   Command: python manual_vuln_tester.py --interactive")
    
    print("\n2️⃣  ADVANCED START (Requires Setup)")
    print("   🤖 AI-Powered Vulnerability Analysis")
    print("   🧠 Deep insights and automated PoC generation") 
    print("   📝 Requires Gemini API key (free to get)")
    print()
    print("   Setup: Get API key from https://makersuite.google.com/app/apikey")
    print("   Command: python gemini_vuln_analyzer.py --interactive")

def get_recommendation():
    """Get recommendation based on user's situation"""
    has_db, vuln_count, db_status = check_vulnerabilities()
    
    print(f"\n🔍 SYSTEM STATUS:")
    print("-" * 30)
    print(f"Database: {db_status}")
    print(f"Vulnerabilities: {vuln_count}")
    
    # Check if Gemini is configured
    gemini_key = os.getenv('GEMINI_API_KEY')
    has_gemini_lib = False
    
    try:
        import google.generativeai
        has_gemini_lib = True
    except ImportError:
        pass
    
    print(f"Gemini API Key: {'✅ Set' if gemini_key else '❌ Not set'}")
    print(f"Gemini Library: {'✅ Installed' if has_gemini_lib else '❌ Not installed'}")
    
    print(f"\n💡 RECOMMENDATION:")
    print("-" * 30)
    
    if not has_db or vuln_count == 0:
        print("🎯 STEP 1: Find some vulnerabilities first!")
        print("   Run your main bug bounty scanner to discover vulnerabilities")
        print("   Command: python kali_bb_pro.py")
        print()
        print("🎯 STEP 2: Then come back to analyze them")
        return "scan_first"
    
    elif vuln_count > 0 and not gemini_key:
        print("🎯 START HERE: Manual analysis (no setup required)")
        print(f"   You have {vuln_count} vulnerabilities ready to analyze")
        print("   Command: python manual_vuln_tester.py --interactive")
        print()
        print("🔮 UPGRADE LATER: Set up AI analysis for deeper insights")
        print("   Get free API key: https://makersuite.google.com/app/apikey")
        return "manual_first"
    
    elif vuln_count > 0 and gemini_key and has_gemini_lib:
        print("🚀 READY FOR FULL POWER!")
        print(f"   You have {vuln_count} vulnerabilities and AI is configured")
        print("   Command: python gemini_vuln_analyzer.py --interactive")
        print()
        print("📚 ALSO AVAILABLE: Manual analysis for learning")
        print("   Command: python manual_vuln_tester.py --interactive")
        return "ai_ready"
    
    else:
        print("🔧 ALMOST READY: Just install the AI library")
        print("   Command: pip install google-generativeai")
        print("   Then use: python gemini_vuln_analyzer.py --interactive")
        return "install_lib"

def show_next_steps(recommendation):
    """Show next steps based on recommendation"""
    print(f"\n⭐ RECOMMENDED NEXT STEPS:")
    print("="*40)
    
    if recommendation == "scan_first":
        print("1. Run your bug bounty scanner first:")
        print("   python kali_bb_pro.py")
        print()
        print("2. Then analyze the findings:")
        print("   python vulnerability_analysis_demo.py")
        
    elif recommendation == "manual_first":
        print("1. Start with manual analysis (ready now!):")
        print("   python manual_vuln_tester.py --interactive")
        print()
        print("2. Pick a vulnerability ID from the list above")
        print()
        print("3. Optional: Set up AI analysis:")
        print("   - Get API key: https://makersuite.google.com/app/apikey")
        print("   - Install: pip install google-generativeai") 
        print("   - Set: export GEMINI_API_KEY='your-key'")
        
    elif recommendation == "ai_ready":
        print("1. Start with AI analysis (everything ready!):")
        print("   python gemini_vuln_analyzer.py --interactive")
        print()
        print("2. Pick a vulnerability ID from the list above")
        print()
        print("3. Also try manual analysis for learning:")
        print("   python manual_vuln_tester.py --interactive")
        
    elif recommendation == "install_lib":
        print("1. Install the AI library:")
        print("   pip install google-generativeai")
        print()
        print("2. Then start AI analysis:")
        print("   python gemini_vuln_analyzer.py --interactive")

def show_examples():
    """Show practical examples"""
    print(f"\n📖 PRACTICAL EXAMPLES:")
    print("="*40)
    
    print("🔍 List all vulnerabilities:")
    print("   python manual_vuln_tester.py --list")
    print()
    
    print("🔧 Analyze specific vulnerability (manual):")
    print("   python manual_vuln_tester.py --vulnerability-id 5")
    print()
    
    print("🤖 Analyze with AI (if configured):")
    print("   python gemini_vuln_analyzer.py --vulnerability-id 5")
    print()
    
    print("📦 Batch analyze multiple vulnerabilities:")
    print("   python gemini_vuln_analyzer.py --batch 10")
    print()
    
    print("🎮 Interactive guided mode:")
    print("   python manual_vuln_tester.py --interactive")
    print("   python gemini_vuln_analyzer.py --interactive")

def main():
    """Main function"""
    print_header()
    
    # Show vulnerabilities if available
    has_vulns = show_vulnerability_sample()
    
    # Show quick start options
    quick_start_options()
    
    # Get personalized recommendation
    recommendation = get_recommendation()
    
    # Show next steps
    show_next_steps(recommendation)
    
    # Show examples
    show_examples()
    
    print(f"\n🏁 READY TO START!")
    print("="*30)
    print("You now have everything you need to analyze vulnerabilities!")
    print()
    print("📚 For detailed help, see:")
    print("   COMPLETE_VULNERABILITY_ANALYSIS_GUIDE.md")
    print()
    print("🎮 For a guided demo:")
    print("   python vulnerability_analysis_demo.py")
    
    # Ask if they want to start now
    if has_vulns:
        print()
        start_now = input("🚀 Would you like to start analyzing now? (y/N): ").lower().strip()
        
        if start_now == 'y':
            # Check what's available and start the appropriate tool
            gemini_key = os.getenv('GEMINI_API_KEY')
            has_gemini_lib = False
            
            try:
                import google.generativeai
                has_gemini_lib = True
            except ImportError:
                pass
            
            if gemini_key and has_gemini_lib:
                print("\n🤖 Starting AI-powered analysis...")
                os.system("python gemini_vuln_analyzer.py --interactive")
            else:
                print("\n🔧 Starting manual analysis...")
                os.system("python manual_vuln_tester.py --interactive")
        else:
            print("\n👍 No problem! Run the commands above when you're ready.")
    
    print("\n👋 Happy hunting! 🎯")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n👋 Goodbye!")
    except Exception as e:
        print(f"\n❌ Error: {e}")
        sys.exit(1)
