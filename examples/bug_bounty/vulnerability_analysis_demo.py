#!/usr/bin/env python3
"""
Vulnerability Analysis Demo
===========================

This script demonstrates how to use the vulnerability analysis and reproduction tools
in your bug bounty framework.

Author: Bug Bounty Pro Team
"""

import os
import sys
import subprocess
from pathlib import Path

def print_banner():
    """Print the demo banner"""
    print("\n" + "="*70)
    print("🔬 VULNERABILITY ANALYSIS & REPRODUCTION DEMO")
    print("="*70)
    print("This demo shows you how to use the vulnerability analysis tools")
    print("available in your bug bounty framework.\n")

def check_database():
    """Check if the bug bounty database exists"""
    db_path = Path("bb_pro.db")
    if not db_path.exists():
        print("❌ Database 'bb_pro.db' not found!")
        print("   Run your main bug bounty system first to find vulnerabilities.")
        return False
    
    print("✅ Database found: bb_pro.db")
    return True

def check_gemini_setup():
    """Check if Gemini API is set up"""
    api_key = os.getenv('GEMINI_API_KEY')
    
    if api_key:
        print("✅ Gemini API key found")
        try:
            import google.generativeai
            print("✅ google-generativeai package installed")
            return True
        except ImportError:
            print("❌ google-generativeai package not installed")
            print("   Install with: pip install google-generativeai")
            return False
    else:
        print("❌ GEMINI_API_KEY not found in environment")
        print("   Get one from: https://makersuite.google.com/app/apikey")
        print("   Set with: export GEMINI_API_KEY='your-api-key'")
        return False

def demo_list_vulnerabilities():
    """Demo listing vulnerabilities"""
    print("\n📊 DEMO: Listing Found Vulnerabilities")
    print("-" * 50)
    
    # Try the manual tester first (no API required)
    try:
        result = subprocess.run([
            sys.executable, "manual_vuln_tester.py", "--list"
        ], capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print("✅ Successfully listed vulnerabilities:")
            print(result.stdout)
        else:
            print("❌ Error listing vulnerabilities:")
            print(result.stderr)
            
    except FileNotFoundError:
        print("❌ manual_vuln_tester.py not found in current directory")
    except subprocess.TimeoutExpired:
        print("❌ Command timed out")
    except Exception as e:
        print(f"❌ Error: {e}")

def demo_manual_analysis():
    """Demo manual vulnerability analysis"""
    print("\n🔧 DEMO: Manual Vulnerability Analysis")
    print("-" * 50)
    
    vuln_id = input("Enter vulnerability ID to analyze (or press Enter to skip): ").strip()
    
    if not vuln_id:
        print("⏭️  Skipping manual analysis demo")
        return
    
    try:
        vuln_id = int(vuln_id)
        print(f"\n🔄 Generating manual test guide for vulnerability {vuln_id}...")
        
        result = subprocess.run([
            sys.executable, "manual_vuln_tester.py", 
            "--vulnerability-id", str(vuln_id)
        ], capture_output=True, text=True, timeout=60)
        
        if result.returncode == 0:
            print("✅ Manual test guide generated successfully!")
            print(result.stdout)
            
            # Ask if they want to view the report
            view = input("\n📖 Would you like to view the generated report? (y/N): ").lower()
            if view == 'y':
                # Try to open the most recent report
                reports_dir = Path("manual_test_reports")
                if reports_dir.exists():
                    reports = list(reports_dir.glob(f"manual_test_vuln_{vuln_id}_*.md"))
                    if reports:
                        latest_report = max(reports, key=lambda p: p.stat().st_mtime)
                        if os.name == 'nt':  # Windows
                            os.startfile(latest_report)
                        else:  # Linux/Mac
                            os.system(f'xdg-open "{latest_report}" 2>/dev/null || open "{latest_report}" 2>/dev/null')
        else:
            print("❌ Error generating manual test guide:")
            print(result.stderr)
            
    except ValueError:
        print("❌ Invalid vulnerability ID. Please enter a number.")
    except FileNotFoundError:
        print("❌ manual_vuln_tester.py not found")
    except Exception as e:
        print(f"❌ Error: {e}")

def demo_ai_analysis():
    """Demo AI-powered vulnerability analysis"""
    print("\n🤖 DEMO: AI-Powered Vulnerability Analysis")
    print("-" * 50)
    
    if not check_gemini_setup():
        print("⏭️  Skipping AI analysis demo (Gemini API not configured)")
        return
    
    vuln_id = input("Enter vulnerability ID for AI analysis (or press Enter to skip): ").strip()
    
    if not vuln_id:
        print("⏭️  Skipping AI analysis demo")
        return
    
    try:
        vuln_id = int(vuln_id)
        print(f"\n🔄 Generating AI analysis for vulnerability {vuln_id}...")
        print("   This may take a few minutes as AI generates comprehensive analysis...")
        
        result = subprocess.run([
            sys.executable, "gemini_vuln_analyzer.py", 
            "--vulnerability-id", str(vuln_id)
        ], capture_output=True, text=True, timeout=300)  # 5 minute timeout
        
        if result.returncode == 0:
            print("✅ AI analysis completed successfully!")
            print(result.stdout)
            
            # Ask if they want to view the report
            view = input("\n📖 Would you like to view the AI analysis report? (y/N): ").lower()
            if view == 'y':
                reports_dir = Path("vulnerability_analysis_reports")
                if reports_dir.exists():
                    reports = list(reports_dir.glob(f"vuln_{vuln_id}_*.md"))
                    if reports:
                        latest_report = max(reports, key=lambda p: p.stat().st_mtime)
                        if os.name == 'nt':  # Windows
                            os.startfile(latest_report)
                        else:  # Linux/Mac
                            os.system(f'xdg-open "{latest_report}" 2>/dev/null || open "{latest_report}" 2>/dev/null')
        else:
            print("❌ Error generating AI analysis:")
            print(result.stderr)
            
    except ValueError:
        print("❌ Invalid vulnerability ID. Please enter a number.")
    except FileNotFoundError:
        print("❌ gemini_vuln_analyzer.py not found")
    except subprocess.TimeoutExpired:
        print("❌ AI analysis timed out (this can happen with complex vulnerabilities)")
    except Exception as e:
        print(f"❌ Error: {e}")

def demo_interactive_mode():
    """Demo interactive mode"""
    print("\n🎮 DEMO: Interactive Mode")
    print("-" * 50)
    
    print("The tools also have interactive modes that provide guided menus.")
    print("You can access them with:")
    print()
    print("  python manual_vuln_tester.py --interactive")
    print("  python gemini_vuln_analyzer.py --interactive")
    print()
    
    run_interactive = input("Would you like to try interactive mode now? (y/N): ").lower()
    
    if run_interactive == 'y':
        tool_choice = input("Choose tool: (1) Manual Tester, (2) AI Analyzer: ").strip()
        
        if tool_choice == '1':
            print("\n🔄 Starting Manual Tester interactive mode...")
            try:
                subprocess.run([sys.executable, "manual_vuln_tester.py", "--interactive"])
            except KeyboardInterrupt:
                print("\n⏹️  Interactive mode interrupted")
            except Exception as e:
                print(f"❌ Error: {e}")
                
        elif tool_choice == '2' and check_gemini_setup():
            print("\n🔄 Starting AI Analyzer interactive mode...")
            try:
                subprocess.run([sys.executable, "gemini_vuln_analyzer.py", "--interactive"])
            except KeyboardInterrupt:
                print("\n⏹️  Interactive mode interrupted")
            except Exception as e:
                print(f"❌ Error: {e}")
        else:
            print("⏭️  Skipping interactive mode")

def show_quick_reference():
    """Show quick reference commands"""
    print("\n📚 QUICK REFERENCE")
    print("-" * 50)
    print("Here are the key commands you can use:")
    print()
    print("📊 List vulnerabilities:")
    print("  python manual_vuln_tester.py --list")
    print()
    print("🔧 Manual testing guide:")
    print("  python manual_vuln_tester.py --vulnerability-id [ID]")
    print()
    print("🤖 AI analysis (requires API key):")
    print("  python gemini_vuln_analyzer.py --vulnerability-id [ID]")
    print()
    print("🎮 Interactive modes:")
    print("  python manual_vuln_tester.py --interactive")
    print("  python gemini_vuln_analyzer.py --interactive")
    print()
    print("📦 Batch processing:")
    print("  python gemini_vuln_analyzer.py --batch [NUMBER]")
    print("  python manual_vuln_tester.py --all")
    print()

def show_setup_help():
    """Show setup help"""
    print("\n🛠️ SETUP HELP")
    print("-" * 50)
    print("To get the most out of these tools:")
    print()
    print("1. For Manual Testing (no setup required):")
    print("   ✅ Already ready to use!")
    print()
    print("2. For AI Analysis:")
    print("   📝 Get Gemini API key: https://makersuite.google.com/app/apikey")
    print("   💾 Install package: pip install google-generativeai")
    print("   🔧 Set environment: export GEMINI_API_KEY='your-key'")
    print()
    print("3. Ensure you have vulnerabilities to analyze:")
    print("   🔍 Run your main bug bounty scanner first")
    print("   📊 Check that bb_pro.db contains vulnerability data")
    print()

def main():
    """Main demo function"""
    print_banner()
    
    # Check prerequisites
    print("🔍 CHECKING PREREQUISITES")
    print("-" * 50)
    
    if not check_database():
        print("\n❌ Cannot run demo without vulnerability data.")
        print("   Please run your bug bounty scanner first to find vulnerabilities.")
        show_setup_help()
        return
    
    has_gemini = check_gemini_setup()
    
    if not has_gemini:
        print("\n⚠️  AI features will not be available in this demo.")
        print("   Manual testing features will still work.")
    
    print("\n" + "="*70)
    print("🎯 VULNERABILITY ANALYSIS DEMO")
    print("="*70)
    
    while True:
        print("\n📋 Demo Options:")
        print("1. 📊 List found vulnerabilities")
        print("2. 🔧 Manual vulnerability analysis")
        if has_gemini:
            print("3. 🤖 AI-powered vulnerability analysis")
        else:
            print("3. 🤖 AI-powered analysis (unavailable - setup required)")
        print("4. 🎮 Interactive mode demo")
        print("5. 📚 Show quick reference")
        print("6. 🛠️  Show setup help")
        print("7. 🚪 Exit demo")
        
        choice = input("\n👉 Enter your choice (1-7): ").strip()
        
        if choice == '1':
            demo_list_vulnerabilities()
        elif choice == '2':
            demo_manual_analysis()
        elif choice == '3':
            if has_gemini:
                demo_ai_analysis()
            else:
                print("\n❌ AI analysis not available. Please set up Gemini API first.")
                show_setup_help()
        elif choice == '4':
            demo_interactive_mode()
        elif choice == '5':
            show_quick_reference()
        elif choice == '6':
            show_setup_help()
        elif choice == '7':
            print("\n👋 Thank you for trying the vulnerability analysis demo!")
            print("   Use the quick reference commands to continue analyzing vulnerabilities.")
            break
        else:
            print("❌ Invalid choice. Please try again.")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n👋 Demo interrupted. Goodbye!")
    except Exception as e:
        print(f"\n❌ Demo error: {e}")
        sys.exit(1)
