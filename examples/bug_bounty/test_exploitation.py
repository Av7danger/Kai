#!/usr/bin/env python3
"""
üß™ Test Exploitation & Post-Exploitation System
Demonstrates all features of the exploitation system
"""

import sys
import os
import json
import time
from datetime import datetime
from pathlib import Path

# Add the current directory to Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from exploit_manager import initialize_exploit_manager, get_exploit_manager

def test_exploitation_system():
    """Test the complete exploitation and post-exploitation system"""
    
    print("üî• Testing Exploitation & Post-Exploitation System")
    print("=" * 60)
    
    # Initialize exploit manager
    print("\n1. Initializing exploit manager...")
    try:
        exploit_manager = initialize_exploit_manager('exploitation_config.yml')
        print("‚úÖ Exploit manager initialized successfully")
    except Exception as e:
        print(f"‚ùå Failed to initialize exploit manager: {e}")
        return
    
    # Test 1: Create exploitation sessions
    print("\n2. Creating exploitation sessions...")
    session_ids = []
    
    # RCE Session
    rce_session_id = exploit_manager.create_exploit_session(
        target="example.com",
        session_type="rce",
        payload="|whoami",
        safety_mode=True
    )
    session_ids.append(rce_session_id)
    print(f"‚úÖ Created RCE session: {rce_session_id}")
    
    # SQL Injection Session
    sqli_session_id = exploit_manager.create_exploit_session(
        target="example.com",
        session_type="sqli",
        payload="' OR '1'='1",
        safety_mode=True
    )
    session_ids.append(sqli_session_id)
    print(f"‚úÖ Created SQL injection session: {sqli_session_id}")
    
    # Privilege Escalation Session
    privesc_session_id = exploit_manager.create_exploit_session(
        target="192.168.1.100",
        session_type="privesc",
        payload="sudo exploitation",
        safety_mode=True
    )
    session_ids.append(privesc_session_id)
    print(f"‚úÖ Created privilege escalation session: {privesc_session_id}")
    
    # Data Exfiltration Session
    exfil_session_id = exploit_manager.create_exploit_session(
        target="example.com",
        session_type="exfil",
        payload="file exfiltration",
        safety_mode=True
    )
    session_ids.append(exfil_session_id)
    print(f"‚úÖ Created data exfiltration session: {exfil_session_id}")
    
    # Test 2: Execute RCE exploits
    print("\n3. Testing RCE exploits...")
    rce_methods = ['command_injection', 'file_upload', 'deserialization']
    
    for method in rce_methods:
        try:
            result = exploit_manager.execute_rce_exploit(rce_session_id, method)
            print(f"üî• RCE {method}: {'‚úÖ Success' if result.success else '‚ùå Failed'}")
            print(f"   Output: {result.output[:100]}...")
            if result.credentials_found:
                print(f"   Credentials found: {len(result.credentials_found)}")
        except Exception as e:
            print(f"‚ùå RCE {method} failed: {e}")
    
    # Test 3: Execute SQL injection exploits
    print("\n4. Testing SQL injection exploits...")
    sqli_methods = ['boolean_based', 'time_based', 'union_based']
    
    for method in sqli_methods:
        try:
            result = exploit_manager.execute_sqli_exploit(sqli_session_id, method)
            print(f"üíâ SQL injection {method}: {'‚úÖ Success' if result.success else '‚ùå Failed'}")
            print(f"   Output: {result.output[:100]}...")
            if result.credentials_found:
                print(f"   Credentials found: {len(result.credentials_found)}")
        except Exception as e:
            print(f"‚ùå SQL injection {method} failed: {e}")
    
    # Test 4: Execute privilege escalation
    print("\n5. Testing privilege escalation...")
    privesc_techniques = ['sudo_exploitation', 'suid_exploitation', 'kernel_exploitation']
    
    for technique in privesc_techniques:
        try:
            result = exploit_manager.execute_privesc(privesc_session_id, technique)
            print(f"‚¨ÜÔ∏è  Privilege escalation {technique}: {'‚úÖ Success' if result.success else '‚ùå Failed'}")
            print(f"   {result.original_user} ‚Üí {result.elevated_user}")
            print(f"   Method: {result.method_used}")
            print(f"   Output: {result.output[:100]}...")
        except Exception as e:
            print(f"‚ùå Privilege escalation {technique} failed: {e}")
    
    # Test 5: Execute data exfiltration
    print("\n6. Testing data exfiltration...")
    exfil_types = ['files', 'database', 'credentials', 'configs']
    
    for data_type in exfil_types:
        try:
            result = exploit_manager.execute_data_exfiltration(exfil_session_id, data_type)
            print(f"üìÅ Data exfiltration {data_type}: {'‚úÖ Success' if result.success else '‚ùå Failed'}")
            print(f"   Files exfiltrated: {len(result.files_exfiltrated)}")
            print(f"   Data size: {result.data_size} bytes")
            print(f"   Sensitive data found: {len(result.sensitive_data_found)}")
            print(f"   Method: {result.exfiltration_method}")
        except Exception as e:
            print(f"‚ùå Data exfiltration {data_type} failed: {e}")
    
    # Test 6: Session management
    print("\n7. Testing session management...")
    
    # Get all sessions
    all_sessions = exploit_manager.get_all_sessions()
    print(f"üìä Active sessions: {len(all_sessions)}")
    
    for session in all_sessions:
        print(f"   - {session.id}: {session.session_type} ({session.status})")
    
    # Get specific session
    if session_ids:
        session = exploit_manager.get_session_status(session_ids[0])
        if session:
            print(f"üìã Session {session_ids[0]} details:")
            print(f"   Target: {session.target}")
            print(f"   Type: {session.session_type}")
            print(f"   Status: {session.status}")
            print(f"   Safety mode: {session.safety_mode}")
    
    # Test 7: Generate reports
    print("\n8. Testing report generation...")
    
    for session_id in session_ids:
        try:
            report = exploit_manager.generate_exploitation_report(session_id)
            print(f"üìÑ Report for {session_id}:")
            print(f"   Total attempts: {report['summary']['total_attempts']}")
            print(f"   Successful exploits: {report['summary']['successful_exploits']}")
            print(f"   Successful privesc: {report['summary']['successful_privesc']}")
            print(f"   Successful exfil: {report['summary']['successful_exfil']}")
        except Exception as e:
            print(f"‚ùå Failed to generate report for {session_id}: {e}")
    
    # Test 8: Export data
    print("\n9. Exporting data...")
    try:
        # Export sessions
        sessions_data = []
        for session in exploit_manager.get_all_sessions():
            sessions_data.append({
                'id': session.id,
                'target': session.target,
                'session_type': session.session_type,
                'status': session.status,
                'start_time': session.start_time.isoformat(),
                'end_time': session.end_time.isoformat() if session.end_time else None,
                'safety_mode': session.safety_mode,
                'impact_level': session.impact_level
            })
        
        with open('exploitation_results/sessions_export.json', 'w') as f:
            json.dump(sessions_data, f, indent=2)
        print("‚úÖ Exported sessions to exploitation_results/sessions_export.json")
        
        # Export reports
        reports_data = []
        for session_id in session_ids:
            try:
                report = exploit_manager.generate_exploitation_report(session_id)
                reports_data.append(report)
            except:
                pass
        
        with open('exploitation_results/reports_export.json', 'w') as f:
            json.dump(reports_data, f, indent=2)
        print("‚úÖ Exported reports to exploitation_results/reports_export.json")
        
    except Exception as e:
        print(f"‚ùå Failed to export data: {e}")
    
    # Test 9: Stop a session
    print("\n10. Testing session stop...")
    if session_ids:
        try:
            success = exploit_manager.stop_session(session_ids[0])
            if success:
                print(f"‚úÖ Successfully stopped session {session_ids[0]}")
            else:
                print(f"‚ùå Failed to stop session {session_ids[0]}")
        except Exception as e:
            print(f"‚ùå Error stopping session: {e}")
    
    # Summary
    print("\n" + "=" * 60)
    print("üìã TEST SUMMARY")
    print("=" * 60)
    print(f"üìù Sessions Created: {len(session_ids)}")
    print(f"üî• RCE Exploits Tested: {len(rce_methods)}")
    print(f"üíâ SQL Injection Tests: {len(sqli_methods)}")
    print(f"‚¨ÜÔ∏è  Privilege Escalation Tests: {len(privesc_techniques)}")
    print(f"üìÅ Data Exfiltration Tests: {len(exfil_types)}")
    
    # Calculate success rates
    total_tests = len(rce_methods) + len(sqli_methods) + len(privesc_techniques) + len(exfil_types)
    print(f"üìä Total Tests: {total_tests}")
    
    print("\n‚úÖ Exploitation & Post-Exploitation System Test Complete!")
    print("üìÅ Check exploitation_results/ directory for exported data")
    print("üóÑÔ∏è  Database file: exploitation.db")

def test_api_endpoints():
    """Test the API endpoints"""
    print("\nüåê Testing API Endpoints...")
    
    try:
        from exploitation_api import exploitation_bp
        from flask import Flask
        
        app = Flask(__name__)
        app.register_blueprint(exploitation_bp, url_prefix='/api/exploitation')
        
        print("‚úÖ API endpoints registered successfully")
        print("üìã Available endpoints:")
        print("   GET  /api/exploitation/sessions - List all sessions")
        print("   POST /api/exploitation/sessions - Create new session")
        print("   GET  /api/exploitation/sessions/<id> - Get specific session")
        print("   POST /api/exploitation/sessions/<id>/stop - Stop session")
        print("   POST /api/exploitation/exploit/rce - Execute RCE exploit")
        print("   POST /api/exploitation/exploit/sqli - Execute SQL injection")
        print("   POST /api/exploitation/privesc - Execute privilege escalation")
        print("   POST /api/exploitation/exfil - Execute data exfiltration")
        print("   GET  /api/exploitation/sessions/<id>/report - Generate report")
        print("   GET  /api/exploitation/config - Get configuration")
        print("   GET  /api/exploitation/status - Get system status")
        
    except Exception as e:
        print(f"‚ùå Failed to test API endpoints: {e}")

def test_safety_features():
    """Test safety features"""
    print("\nüõ°Ô∏è  Testing Safety Features...")
    
    try:
        exploit_manager = get_exploit_manager()
        
        print(f"üîí Safety enabled: {exploit_manager.safety_enabled}")
        print(f"üîí Require consent: {exploit_manager.require_consent}")
        print(f"üîí Dry run mode: {exploit_manager.dry_run_mode}")
        
        # Test consent requirement
        if exploit_manager.require_consent:
            print("‚ö†Ô∏è  Consent required for exploitation")
            print("   Set EXPLOIT_CONSENT=true to enable real exploitation")
        else:
            print("‚úÖ No consent required")
        
        # Test dry run mode
        if exploit_manager.dry_run_mode:
            print("üõ°Ô∏è  Dry run mode enabled - all exploits are simulated")
        else:
            print("‚ö†Ô∏è  Dry run mode disabled - real exploitation possible")
        
        print("‚úÖ Safety features working correctly")
        
    except Exception as e:
        print(f"‚ùå Failed to test safety features: {e}")

if __name__ == "__main__":
    # Run the main test
    test_exploitation_system()
    
    # Test API endpoints
    test_api_endpoints()
    
    # Test safety features
    test_safety_features()
    
    print("\nüéâ All tests completed successfully!") 